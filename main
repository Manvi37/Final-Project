extern crate rand;

use rand::Rng;
use std::io;
use std::thread;
use std::time::Duration;

const WIDTH: usize = 20;
const HEIGHT: usize = 10;

struct GameState {
    ball_x: usize,
    ball_y: usize,
    ball_dx: i32,
    ball_dy: i32,
    paddle_x: usize,
    score: u32,
}

impl GameState {
    fn new() -> GameState {
        let mut rng = rand::thread_rng();
        let ball_x = rng.gen_range(1..WIDTH - 1);
        let ball_y = rng.gen_range(1..HEIGHT - 1);
        let ball_dx = if rng.gen_bool(0.5) { 1 } else { -1 };
        let ball_dy = if rng.gen_bool(0.5) { 1 } else { -1 };
        let paddle_x = WIDTH / 2;
        let score = 0;
        GameState {
            ball_x,
            ball_y,
            ball_dx,
            ball_dy,
            paddle_x,
            score,
        }
    }

    fn update(&mut self) {
        self.ball_x = (self.ball_x as i32 + self.ball_dx) as usize;
        self.ball_y = (self.ball_y as i32 + self.ball_dy) as usize;

        // Check collision with walls
        if self.ball_x == 0 || self.ball_x == WIDTH - 1 {
            self.ball_dx *= -1;
        }
        if self.ball_y == 0 {
            self.ball_dy *= -1;
        } else if self.ball_y == HEIGHT - 1 {
            // Check collision with paddle
            if self.ball_x == self.paddle_x {
                self.ball_dy *= -1;
                self.score += 1;
            } else {
                // Game over
                println!("Game Over! Your Score: {}", self.score);
                std::process::exit(0);
            }
        }
    }

    fn draw(&self) {
        print!("\x1B[2J\x1B[H"); // Clear the screen
        for y in 0..HEIGHT {
            for x in 0..WIDTH {
                if (x == self.ball_x && y == self.ball_y) || (y == HEIGHT - 1 && x == self.paddle_x)
                {
                    print!("â–ˆ"); // Ball or paddle
                } else {
                    print!(" "); // Empty space
                }
            }
            println!();
        }
        println!("Score: {}", self.score);
    }
}

fn main() {
    let mut game_state = GameState::new();

    loop {
        game_state.draw();
        game_state.update();

        // Move paddle left or right based on user input
        let mut input = String::new();
        match io::stdin().read_line(&mut input) {
            Ok(_) => {
                match input.trim() {
                    "a" if game_state.paddle_x > 1 => game_state.paddle_x -= 1,
                    "d" if game_state.paddle_x < WIDTH - 2 => game_state.paddle_x += 1,
                    _ => {}
                }
            }
            Err(error) => println!("Error reading input: {}", error),
        }

        thread::sleep(Duration::from_millis(100)); // Pause for a short time
    }
}
